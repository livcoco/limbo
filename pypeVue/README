The pypeVue program allows easy drawing of "posts and pipes" figures.
It interprets drawing-scripts for figures, and produces files of
OpenSCAD code representing the figures.

Figures to be drawn are made up of cylinders (pipes) connected between
locations in space (posts).  This paradigm is useful for drawing
diagrams of geodesic domes.

This file briefly describes software requirements; running the
program; getting pypeVue to run automatically, or OpenSCAD to update
automatically, when you change a source file; and how to create
software plugins.

--- Software requirements ---

To use the program, you need to have python3 and OpenSCAD installed on
your system.  [An early version of pypeVue ("pipeVue0.py") also
required the `SolidPython` module, but this version does not.]

Obtain files pypeVue.py, pypeVue.codeBase.scad, pypePlugins/__init__.py,
pypePlugins/baseFuncs.py, and a script file for the drawing you wish
to make.  For script-file examples, see the files in the pypeVue
directory whose names start with "eg-".  For details about how to
write scripts, see the LibreOffice file pypeVue.dox.odt or PDF file
pypeVue.dox.pdf.

--- Running the program ---
  
When you run the program to process a script, it will write SCAD code
to a file (by default, to pypeVue.scad). For example, you might say

     ./pypeVue.py  f=eg-pentagon-script

which will produce pypeVue.scad based on that script, and then you
might say

     openscad pypeVue.scad &

which will cause OpenSCAD to read pypeVue.scad and display the created
figure.

--- Automatic updates in OpenSCAD  ---
  
If OpenSCAD's `Design -> Automatic Reload and Preview` option is on,
then once you've started OpenSCAD as above, it will notice whenever
pypeVue.scad changes, and will re-render the image.

--- Automatically running pypeVue on script file changes  ---

From https://github.com/ghjwp7/plastics/blob/master/exec-on-change
obtain the exec-on-change shell script (and its requirements).  Then a
command like that below will automatically run pypeVue whenever file
"myscriptfile" changes.  Then OpenSCAD will see that pypeVue.scad
changed, and will re-render.

     exec-on-change myscriptfile  './pypeVue f=myscriptfile' &

Other comments (about running the program) appear at the beginning of
pypeVue.py.

--- How to create software plugins ---

PypeVue supports plugins, allowing individual functions used by
pypeVue processing to be replaced.  Thus, one can customize pypeVue
output without modifying pypeVue itself.  To create a plugin, create a
Python module or modules in the pypeVue/pypePlugins subdirectory,
following instructions in examples there.  In your script or on the
command line, set parameter Plugins to a list of module names, in the
order you want the modules processed.  If there are several Plugins
settings, their module lists are concatenated together in the order of
appearance, ending with Plugins settings from the command line.
Modules in pypeVue/pypePlugins that are not mentioned in a Plugins
parameter setting do not get loaded or used.

For example, if you want to use one plugin module, myPI (or, file
myPI.py in pypeVue/pypePlugins), you would say "Plugins=myPI" among
parameter settings.  If you had two plugin modules to load, myAxi and
myBio, you could say "Plugins=myAxi,myBio", or "Plugins=myBio,myAxi",
or "Plugins=myBio Plugins=myAxi", etc.  If some function, say
"CrucialOp(z5)" is defined in both of myAxi and myBio, then in the
first case the one from myBio is used, and in the other cases, the one
from myAxi is used.  In short, later-mentioned modules take
precedence.

--- User functions vs Base functions ---

Functions defined with plugin modules can be "user functions" or "base
functions".

Base functions (as listed in a tell() statement at the end of
baseFuncs.py) control how pypeVue gets and treats its inputs and how
it produces its output.  To change intrinsic functionality of some
part of the program, copy the relevant function from baseFuncs.py into
your own module, and modify it to produce what you need in your own
application.  If you change any base function calling sequences,
change all uses for consistency.  If you want to call an original base
function from your substitute for it, import it from baseFuncs and
refer to it via the import.  For example, a substitute for addEdge
could import the base version of addEdge via "from
pypePlugins.baseFuncs import addEdge as baseAddEdge" and could call it
via "baseAddEdge(v,w, layout)" or similar.

User functions have names not equal to any base function.  That is, a
functions defined in a plugins module and listed in a tell() statement
is a user function if it isn't a base function.  If you call your user
function only within an arithmetic section of a script, you can write
it to take whatever arguments seem suitable.  However, if your
function will be invoked by a U code in a layout section, then a call
to it will look like userfunc(ref, p1, p2) or userfunc(ref, p1, p2,
p3, p4) etc depending on how many numerical parameters the U code
gives it.  For example, if "U myPIf5 1,2,4;" appears in a layout
section, pypeVue will say something equivalent to "ref.myPIf5(ref,
1.0, 2.0, 4.0)" at that point in its processing.  
